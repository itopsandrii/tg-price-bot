package main

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –í—ã–Ω–µ—Å–µ–º —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
const (
	botToken      = "797187266–≠" // <-- –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–ò–ú –¢–û–ö–ï–ù–û–ú
	imagesDir     = "images"
	welcomeMsg    = "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è —Å–∫–∞–∂—É —Ç–µ–±–µ —Ü–µ–Ω—É!"
	unknownCmdMsg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üòï"
	sendPhotoMsg  = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —É–∑–Ω–∞—Ç—å –µ–≥–æ —Ü–µ–Ω—É!"
	photoSavedMsg = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! ‚úÖ"
)

func main() {
	// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	if err := os.MkdirAll(imagesDir, 0755); err != nil {
		log.Panic("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É 'images':", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	handleUpdates(bot, updates)
}

// handleUpdates –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
func handleUpdates(bot *tgbotapi.BotAPI, updates tgbotapi.UpdatesChannel) {
	for update := range updates {
		if update.Message == nil {
			continue
		}

		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		if update.Message.IsCommand() {
			handleCommand(bot, update.Message)
		} else if len(update.Message.Photo) > 0 {
			handlePhoto(bot, update.Message)
		} else {
			// –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, sendPhotoMsg)
			bot.Send(msg)
		}
	}
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func handleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	var responseText string
	switch message.Command() {
	case "start":
		responseText = welcomeMsg
	default:
		responseText = unknownCmdMsg
	}
	msg := tgbotapi.NewMessage(message.Chat.ID, responseText)
	bot.Send(msg)
}

// handlePhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
func handlePhoto(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	// –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω—é—é –≤ –º–∞—Å—Å–∏–≤–µ)
	fileID := message.Photo[len(message.Photo)-1].FileID

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ (–≤–∫–ª—é—á–∞—è FilePath)
	fileConfig := tgbotapi.FileConfig{FileID: fileID}
	file, err := bot.GetFile(fileConfig)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. üò¢"))
		return
	}
	log.Printf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –ø–æ–ª—É—á–µ–Ω–∞: %+v", file)

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É FilePath
	err = downloadFile(bot.Token, file.FilePath)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. üò¢"))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(message.Chat.ID, photoSavedMsg)
	bot.Send(msg)
}

// downloadFile —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ
func downloadFile(token, filePath string) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
	fileURL := fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", token, filePath)

	// –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
	response, err := http.Get(fileURL)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ http.Get: %w", err)
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: %s", response.Status)
	}

	// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø—É—Ç–∏ –≤ Telegram
	fileName := filepath.Base(filePath)
	fullPath := filepath.Join(imagesDir, fileName)

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
	file, err := os.Create(fullPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %w", err)
	}
	defer file.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (—Ñ–∞–π–ª) –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
	_, err = io.Copy(file, response.Body)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞: %w", err)
	}

	log.Printf("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s", fullPath)
	return nil
}
